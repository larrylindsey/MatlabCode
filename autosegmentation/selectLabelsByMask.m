function [maskOut labels weight] = selectLabelsByMask(imseg, mask, t)
% [maskOut labels weight] = selectLabelsByMask(imseg, mask, t)
% imseg - segmentation label image, where each pixel corresponds either to
%         a segment border (0), or the label of the segment that the given
%         pixel belongs to.
% mask - the mask to which segmentation labels should be matched.
% t - threshold fraction. This should be either singleton or a vector
%     holding two values. In the latter case, the first threshold is used
%     for "outter" matching, while the second is used for "inner." Here,
%     outter matching is scored by mask .* label / cardinality(mask), while
%     inner matching is scored by mask .* label / cardinality(label)
%
% maskOut - the mask image generated by or'ing together all matched labels
%           segments.
% labels - the label segmend indices that were matched.
% weight - the labels' corresponding weights.

if nargin < 3
    t = .75;
end

if numel(t) < 2
    t = [t t];
end

mask = adjustMaskSize(imseg, mask);

maskLabel = bwlabel(mask, 4);

n = max(maskLabel(:));

allLabels = cell(n, 1);
allWeights = cell(n, 1);

for il = 1:n
    currMask = maskLabel == il;
    
    [innerLabels innerWeight] = findInnerLabels(imseg, currMask, t(2));
         
    [outterLabels outterWeight] = findOutterLabels(imseg, currMask, ...
        t(1),innerLabels, sum(innerWeight));
    
    allLabels{il} = cat(1, innerLabels(:), outterLabels(:));
    allWeights{il} = cat(1, innerWeight(:), outterWeight(:));
end

maskOut = catLabels(imseg, allLabels);

labels = cat(1, allLabels{:});
weight = cat(1, allWeights{:});

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function mask = adjustMaskSize(imseg, mask)

[rm cm] = size(mask);
[rs cs] = size(imseg);

if rm > rs
    d = rm - rs;
    mask = mask(floor(d / 2) + (1:rs),:);
    rm = rs;
elseif rm < rs
    d = rs - rm;
    mask = cat(1, false(floor(d / 2), cm), mask, false(ceil(d / 2), cm));
    rm = rs;
end

if cm > cs
    d = cm - cs;
    mask = mask(:, floor(d / 2) + (1:cs));    
elseif cs < cm
    d = cs - cm;
    mask = cat(2, false(rm, floor(d / 2)), mask, false(rm, ceil(d / 2)));
end

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [labels oWeight] = findInnerLabels(imseg, mask, t)

imsegSel = imseg .* mask;
labels = unique(imsegSel(imsegSel > 0));

weight = zeros(size(labels));
oWeight = weight;

maskWeight = numel(mask(mask)); % A little tricky

for il = 1:numel(labels)
    w = sum(imseg(:) == labels(il));
    ws = sum(imsegSel(:) == labels(il));
    weight(il) = ws / w;
    oWeight(il) = ws / maskWeight;
end

sel = weight >= t;

labels = labels(sel);
oWeight = oWeight(sel);

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [labels weight] = findOutterLabels(imseg, mask, t, ...
    excludeLabels, excludeWeight)
imsegSel = imseg .* mask;
labels = unique(imsegSel(imsegSel > 0));
labels = setdiff(labels, excludeLabels);

weight = zeros(size(labels));

maskWeight = numel(mask(mask)); % A little tricky

for il = 1:numel(labels)
    ws = sum(imsegSel(:) == labels(il));
    weight(il) = ws / maskWeight;
end

[weight iSort] = sort(weight, 'descend');
labels = labels(iSort);
weightCS = cumsum(weight) + excludeWeight;

sel = weightCS <= t;
weight = weight(sel);
labels = labels(sel);


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function mask = catLabels(imseg, allLabels)

labels = cat(1, allLabels{:});
mask = false(size(imseg));

for il = 1:numel(labels)
    mask = or(mask, imseg == labels(il));
end

end


