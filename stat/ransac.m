function [outSpace outModel minError] = ...
    ransac(universe, model, metric, maxMeasure, minInliers, n, maxIter, ...
    extra)
% function [outSpace outModel minError] = ...
%    ransac(universe, model, metric, maxMeasure, minInliers, n, maxIter)
% Performs the RANSAC algorithm over a sample space.
%
% universe - the sample set universe, with size [p q], where p is the
%            total number of samples in the set, and q is the cardinality
%            of each sample.
% model - a function handle to create a model.
%               m_out = model(samples)
%         samples - a subset of the universe variable, with size [r q],
%                   where r is between n and p, inclusive.
%         m_out - the model output.  The format of this variable is not
%         specified by this function.
% metric - a function handle used to measure the error in a model output.
%               measure = metric(m_in, samples)
%         m_in - a model variable, as generated by <model>
%         samples - a subset of hte universe variable, with size [r, q],
%                   where r is between n + 1 and p, inclusive.
%         measure - a numerical value representing the error calculated by
%                   applying the given model to the input subset.  A
%                   smaller value should indicate a better model.
% maxMeasure - the maximum allowed error measure.
% minInliers - the minimum allowed inliers.
% n - the minimum number of samples required to produce a model.
% maxIter - the maximum number of iterations.
%
% outSpace - a subset of the universe input variable corresponding to the
%            best fit model.
% outModel - the best fit model, as returned by @model
% minError - the error as calculated by @metric for this model / space
%            combination.


if nargin < 1
    outSpace = inputStruct('universe', 'model', 'metric', 'maxMeasure',...
        'minInliers', 'n', 'maxIter');
    return;
end

if numel(universe) == 1 && isstruct(universe)
    [universe, model, metric, maxMeasure, minInliers, n, maxIter, extra] =...
        inputStruct(universe, 'universe', 'model', 'metric',...
        'maxMeasure', 'minInliers', 'n', 'maxIter', 'extra');
end

if nargin < 8
    extra = [];
end

minError = inf;
outModel = [];
outSpace = [];

oldDbgN = 0;

for i_it = 1:maxIter
    sampleSpace = sample(universe, n);
    inliers = sampleSpace;
    newModel = model(sampleSpace, extra);
    
    nonSample = setdiff(universe, sampleSpace, 'rows');
    
    measure = zeros(1, size(nonSample, 1));
    
    parfor i_r = 1:size(nonSample, 1)
        measure(i_r) = metric(newModel,...
            cat(1, sampleSpace, nonSample(i_r, :)), extra);
    end
    
    catSel = measure < maxMeasure;
    inliers = cat(1, inliers, nonSample(catSel, :));
    
    if size(inliers, 1) > minInliers
        testModel = model(inliers, extra);
        testMeasure = metric(testModel, inliers, extra);
        if testMeasure < minError
            minError = testMeasure;
            outModel = testModel;
            outSpace = inliers;
        end
    end
    
    dbgStr = sprintf('Iter: %g, s %g, e %f, ts %g, te %f', ...
        i_it, size(outSpace, 1), minError, ...
        size(inliers, 1), min(measure));
    
    fprintf(repmat('\b', [1 oldDbgN]));
    
    oldDbgN = numel(dbgStr);
    fprintf(dbgStr);
    
    if size(outSpace, 1) >= size(universe, 1)
        fprintf(['\nRANSAC sample found to contain entire universe,'...
            ' returning\n']);
        return;
    end
end
fprintf('\n');
end

function s = sample(in, n)
rr = randperm(size(in, 1));
rr = rr(1:n);
s = in(rr, :);
end



